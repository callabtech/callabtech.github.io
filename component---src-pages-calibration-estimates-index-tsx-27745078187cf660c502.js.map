{"version":3,"file":"component---src-pages-calibration-estimates-index-tsx-27745078187cf660c502.js","mappings":"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","sources":["webpack://@callabt/front-manager/./src/view/component/page/CalibrationEstimatesPage/index.tsx","webpack://@callabt/front-manager/./src/lib/timetext/index.ts","webpack://@callabt/front-manager/./src/pages/calibration-estimates/index.tsx","webpack://@callabt/front-manager/../../node_modules/.pnpm/@mui+icons-material@7.1.2_@mui+material@7.1.2_@types+react@18.3.23_react@18.3.1/node_modules/@mui/icons-material/esm/Edit.js"],"sourcesContent":["import React, { FunctionComponent } from 'react';\r\n\r\nimport Typography from '@mui/material/Typography';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Button from '@mui/material/Button';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport { styled } from '@mui/material/styles';\r\nimport Pagination from '../../pagination/Pagination';\r\n\r\ninterface PaginationInfo {\r\n  pageNumber: number;\r\n  pageSize: number;\r\n  totalCount: number;\r\n  onPageChange: (page: number) => void;\r\n  onPageSizeChange: (pageSize: number) => void;\r\n}\r\n\r\ninterface Props {\r\n  rows: Row[];\r\n  onClickEdit: (id: number) => void;\r\n  paginationInfo: PaginationInfo;\r\n}\r\n\r\nexport interface Row {\r\n  id: number;\r\n  createdAt: string;\r\n  title: string;\r\n  companyName: string;\r\n  requesterName: string;\r\n}\r\n\r\nconst StyledTableHeadCell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.common.white,\r\n    fontWeight: 600,\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n  },\r\n}));\r\n\r\nconst CalibrationEstimatesPage: FunctionComponent<Props> = ({\r\n  rows, onClickEdit, paginationInfo\r\n}) => {\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <Typography variant=\"h4\" style={{ marginBottom: '20px' }}>\r\n        견적 요청\r\n      </Typography>\r\n\r\n      <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableHeadCell>ID</StyledTableHeadCell>\r\n              <StyledTableHeadCell align=\"center\">요청 날짜</StyledTableHeadCell>\r\n              <StyledTableHeadCell align=\"center\">제목</StyledTableHeadCell>\r\n              <StyledTableHeadCell align=\"center\">회사 이름</StyledTableHeadCell>\r\n              <StyledTableHeadCell align=\"center\">요청자 이름</StyledTableHeadCell>\r\n              <StyledTableHeadCell align=\"center\"></StyledTableHeadCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => (\r\n              <TableRow key={row.id} hover>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.id}\r\n                </TableCell>\r\n                <TableCell align=\"center\">{row.createdAt}</TableCell>\r\n                <TableCell align=\"left\">{row.title}</TableCell>\r\n                <TableCell align=\"left\">{row.companyName}</TableCell>\r\n                <TableCell align=\"center\">{row.requesterName}</TableCell>\r\n                <TableCell align=\"center\">\r\n                  <Button variant=\"contained\" color=\"secondary\" onClick={() => onClickEdit(row.id)}>\r\n                    <EditIcon style={{ fontSize: '17px' }} />\r\n                  </Button>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <Pagination {...paginationInfo} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalibrationEstimatesPage;\r\n","export function formatISOToDateTime(isoString) {\r\n  const date = new Date(isoString);\r\n\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // 월은 0부터 시작\r\n  const day = String(date.getDate()).padStart(2, '0');\r\n\r\n  const hours = String(date.getHours()).padStart(2, '0');\r\n  const minutes = String(date.getMinutes()).padStart(2, '0');\r\n  const seconds = String(date.getSeconds()).padStart(2, '0');\r\n\r\n  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n}\r\n\r\nexport function formatISOToDate(isoString) {\r\n  const date = new Date(isoString);\r\n\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // 월은 0부터 시작\r\n  const day = String(date.getDate()).padStart(2, '0');\r\n\r\n  return `${year}-${month}-${day}`;\r\n}\r\n\r\nexport function formatISOToTime(isoString) {\r\n  const date = new Date(isoString);\r\n\r\n  const hours = String(date.getHours()).padStart(2, '0');\r\n  const minutes = String(date.getMinutes()).padStart(2, '0');\r\n  const seconds = String(date.getSeconds()).padStart(2, '0');\r\n\r\n  return `${hours}:${minutes}:${seconds}`;\r\n}\r\n","import React, { FunctionComponent, useEffect, useState } from 'react';\r\nimport CalibrationEstimatesPage, { Row } from '../../view/component/page/CalibrationEstimatesPage';\r\nimport { getCalibrationEstimatesIdPagePath } from '../../lib/app-path';\r\nimport { CallabtAPI } from '@callabt/core';\r\nimport PageWrapper from '../../lib/PageWrapper';\r\nimport { navigate } from 'gatsby';\r\nimport { formatISOToDateTime } from '../../lib/timetext';\r\n\r\nconst CalibrationEstimates: FunctionComponent = () => {\r\n  const [rows, setRows] = useState<Row[]>([]);\r\n  const [pagination, setPagination] = useState({\r\n    pageNumber: 1,\r\n    pageSize: 10,\r\n    totalCount: 0,\r\n  });\r\n\r\n  const fetch = async (page = pagination.pageNumber, size = pagination.pageSize) => {\r\n    try {\r\n      const { data, meta } = await CallabtAPI.GetCalibrationEstimates.getCalibrationEstimatesV1({\r\n        pageSize: size,\r\n        pageNumber: page,\r\n        orderField: 'id',\r\n        orderDirection: 'DESC',\r\n      });\r\n      \r\n      setRows(data.map((item) => ({\r\n        id: item.id,\r\n        createdAt: formatISOToDateTime(item.createdAt),\r\n        title: item.title,\r\n        companyName: item.companyName,\r\n        requesterName: item.requesterName,\r\n      })));\r\n\r\n      setPagination({\r\n        pageNumber: meta.offsetPagination.pageNumber,\r\n        pageSize: meta.offsetPagination.pageSize,\r\n        totalCount: meta.offsetPagination.totalCount,\r\n      });\r\n    } catch (error: any) {\r\n      if (error.errorCodes?.includes(CallabtAPI.GetCalibrationEstimates.ErrorCode.INVALID_QUERY_ORDER_FIELD)) {\r\n        alert('잘못된 정렬 필드입니다.');\r\n      } else if (error.errorCodes?.includes(CallabtAPI.GetCalibrationEstimates.ErrorCode.INVALID_QUERY_ORDER_DIRECTION)) {\r\n        alert('잘못된 정렬 방향입니다.');\r\n      } else {\r\n        alert('교정 견적 목록을 불러오는 데 실패했습니다.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const onClickEdit = (id: number) => {\r\n    navigate(getCalibrationEstimatesIdPagePath({ id }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const handlePageChange = (newPage: number) => {\r\n    fetch(newPage, pagination.pageSize);\r\n  };\r\n\r\n  const handlePageSizeChange = (newPageSize: number) => {\r\n    fetch(1, newPageSize);\r\n  };\r\n\r\n  return (\r\n    <PageWrapper>\r\n      <CalibrationEstimatesPage\r\n        rows={rows}\r\n        onClickEdit={onClickEdit}\r\n        paginationInfo={{\r\n          ...pagination,\r\n          onPageChange: handlePageChange,\r\n          onPageSizeChange: handlePageSizeChange,\r\n        }}\r\n      />\r\n    </PageWrapper>\r\n  );\r\n};\r\n\r\nexport default CalibrationEstimates;\r\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.996.996 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');"],"names":["StyledTableHeadCell","styled","TableCell","_ref","theme","tableCellClasses","head","backgroundColor","palette","primary","main","color","common","white","fontWeight","body","fontSize","_ref2","rows","onClickEdit","paginationInfo","React","style","padding","Typography","variant","marginBottom","TableContainer","component","Paper","Table","TableHead","TableRow","align","TableBody","map","row","key","id","hover","scope","createdAt","title","companyName","requesterName","Button","onClick","EditIcon","Pagination","formatISOToDateTime","isoString","date","Date","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","CalibrationEstimates","setRows","useState","pagination","setPagination","pageNumber","pageSize","totalCount","fetch","async","page","size","data","meta","CallabtAPI","orderField","orderDirection","item","offsetPagination","error","_error$errorCodes","_error$errorCodes2","errorCodes","includes","INVALID_QUERY_ORDER_FIELD","alert","INVALID_QUERY_ORDER_DIRECTION","useEffect","PageWrapper","CalibrationEstimatesPage","navigate","getCalibrationEstimatesIdPagePath","onPageChange","newPage","onPageSizeChange","newPageSize","d"],"sourceRoot":""}