{"version":3,"file":"component---src-pages-managers-index-tsx-2ff7281350fc7d5cf9d8.js","mappings":"4SAgCA,MAAMA,GAAsBC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,CAAkBE,IAAA,IAAC,MAAEC,GAAOD,EAAA,MAAM,CAC5D,CAAC,KAAKE,EAAAA,EAAiBC,QAAS,CAC9BC,gBAAiBH,EAAMI,QAAQC,QAAQC,KACvCC,MAAOP,EAAMI,QAAQI,OAAOC,MAC5BC,WAAY,KAEd,CAAC,KAAKT,EAAAA,EAAiBU,QAAS,CAC9BC,SAAU,OAsCd,MAlC+CC,IAExC,IAFyC,KAC9CC,EAAI,eAAEC,GACPF,EACC,OACEG,EAAAA,cAAA,OAAKC,UAAU,sBACbD,EAAAA,cAACE,EAAAA,EAAU,CAACC,QAAQ,KAAKC,MAAO,CAAEC,aAAc,SAAU,OAI1DL,EAAAA,cAACM,EAAAA,EAAc,CAACC,UAAWC,EAAAA,GACzBR,EAAAA,cAACS,EAAAA,EAAK,KACJT,EAAAA,cAACU,EAAAA,EAAS,KACRV,EAAAA,cAACW,EAAAA,EAAQ,KACPX,EAAAA,cAACpB,EAAmB,CAACgC,MAAM,UAAS,MACpCZ,EAAAA,cAACpB,EAAmB,CAACgC,MAAM,UAAS,QAGxCZ,EAAAA,cAACa,EAAAA,EAAS,KACPf,EAAKgB,IAAKC,GACTf,EAAAA,cAACW,EAAAA,EAAQ,CAACK,IAAKD,EAAIE,GAAIC,OAAK,GAC1BlB,EAAAA,cAAClB,EAAAA,EAAS,CAAC8B,MAAM,SAASL,UAAU,KAAKY,MAAM,OAC5CJ,EAAIE,IAEPjB,EAAAA,cAAClB,EAAAA,EAAS,CAAC8B,MAAM,UAAUG,EAAIK,WAMzCpB,EAAAA,cAACqB,EAAAA,EAAetB,K,mBCPtB,MA5DiBuB,KACf,MAAM,EAACxB,EAAI,EAAEyB,IAAWC,EAAAA,EAAAA,UAAgB,KAClC,EAACC,EAAU,EAAEC,IAAiBF,EAAAA,EAAAA,UAAS,CAC3CG,WAAY,EACZC,SAAU,GACVC,WAAY,IAGRC,EAAQC,eAAOC,EAA8BC,QAA1B,IAAJD,IAAAA,EAAOP,EAAWE,iBAAgB,IAAJM,IAAAA,EAAOR,EAAWG,UACnE,IACE,MAAM,KAAEM,EAAI,KAAEC,SAAeC,EAAAA,GAAAA,GAAAA,cAAqC,CAChER,SAAUK,EACVN,WAAYK,EACZK,WAAY,KACZC,eAAgB,SAElBf,EAAQW,GACRR,EAAc,CACZC,WAAYQ,EAAKI,iBAAiBZ,WAClCC,SAAUO,EAAKI,iBAAiBX,SAChCC,WAAYM,EAAKI,iBAAiBV,YAEtC,CAAE,MAAOW,GAAY,IAAAC,EAAAC,EACC,QAApBD,EAAID,EAAMG,kBAAU,IAAAF,GAAhBA,EAAkBG,SAASR,EAAAA,GAAAA,GAA2BS,2BACxDC,MAAM,iBACmB,QAApBJ,EAAIF,EAAMG,kBAAU,IAAAD,GAAhBA,EAAkBE,SAASR,EAAAA,GAAAA,GAA2BW,+BAC/DD,MAAM,iBAENA,MAAM,yBAEV,CACF,GAEAE,EAAAA,EAAAA,WAAU,KACRlB,KAEC,IAUH,OACE9B,EAAAA,cAACiD,EAAAA,EAAW,KACVjD,EAAAA,cAACkD,EAAY,CACXpD,KAAMA,EACNC,eAAgB,IACX0B,EACH0B,aAdkBC,IACxBtB,EAAMsB,EAAS3B,EAAWG,WAcpByB,iBAXsBC,IAC5BxB,EAAM,EAAGwB,Q","sources":["webpack://@callabt/front-manager/./src/view/component/page/ManagersPage/index.tsx","webpack://@callabt/front-manager/./src/pages/managers/index.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\r\nimport Typography from '@mui/material/Typography';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport { styled } from '@mui/material/styles';\r\nimport Pagination from '../../pagination/Pagination';\r\n\r\nimport './index.scss';\r\n\r\ninterface PaginationInfo {\r\n  pageNumber: number;\r\n  pageSize: number;\r\n  totalCount: number;\r\n  onPageChange: (page: number) => void;\r\n  onPageSizeChange: (pageSize: number) => void;\r\n}\r\n\r\ninterface Props {\r\n  rows: Row[];\r\n  paginationInfo: PaginationInfo;\r\n}\r\n\r\nexport interface Row {\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\nconst StyledTableHeadCell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.common.white,\r\n    fontWeight: 600,\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n  },\r\n}));\r\n\r\nconst ManagersPage: FunctionComponent<Props> = ({\r\n  rows, paginationInfo\r\n}) => {\r\n  return (\r\n    <div className=\"managers-page-comp\">\r\n      <Typography variant=\"h4\" style={{ marginBottom: '20px' }}>\r\n        매니저\r\n      </Typography>\r\n\r\n      <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableHeadCell align=\"center\">ID</StyledTableHeadCell>\r\n              <StyledTableHeadCell align=\"center\">이름</StyledTableHeadCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => (\r\n              <TableRow key={row.id} hover>\r\n                <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                  {row.id}\r\n                </TableCell>\r\n                <TableCell align=\"center\">{row.name}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <Pagination {...paginationInfo} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManagersPage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport ManagersPage, { Row } from '../../view/component/page/ManagersPage';\r\nimport { CallabtAPI } from '@callabt/core';\r\nimport PageWrapper from '../../lib/PageWrapper';\r\n\r\nconst Managers = () => {\r\n  const [rows, setRows] = useState<Row[]>([]);\r\n  const [pagination, setPagination] = useState({\r\n    pageNumber: 1,\r\n    pageSize: 10,\r\n    totalCount: 0,\r\n  });\r\n\r\n  const fetch = async (page = pagination.pageNumber, size = pagination.pageSize) => {\r\n    try {\r\n      const { data, meta } = await CallabtAPI.GetManagers.getManagersV1({\r\n        pageSize: size,\r\n        pageNumber: page,\r\n        orderField: 'id',\r\n        orderDirection: 'DESC',\r\n      });\r\n      setRows(data);\r\n      setPagination({\r\n        pageNumber: meta.offsetPagination.pageNumber,\r\n        pageSize: meta.offsetPagination.pageSize,\r\n        totalCount: meta.offsetPagination.totalCount,\r\n      });\r\n    } catch (error: any) {\r\n      if (error.errorCodes?.includes(CallabtAPI.CommonErrorCode.INVALID_QUERY_ORDER_FIELD)) {\r\n        alert('잘못된 정렬 필드입니다.');\r\n      } else if (error.errorCodes?.includes(CallabtAPI.CommonErrorCode.INVALID_QUERY_ORDER_DIRECTION)) {\r\n        alert('잘못된 정렬 방향입니다.');\r\n      } else {\r\n        alert('관리자 목록을 불러오는 데 실패했습니다.');\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const handlePageChange = (newPage: number) => {\r\n    fetch(newPage, pagination.pageSize);\r\n  };\r\n\r\n  const handlePageSizeChange = (newPageSize: number) => {\r\n    fetch(1, newPageSize);\r\n  };\r\n\r\n  return (\r\n    <PageWrapper>\r\n      <ManagersPage\r\n        rows={rows}\r\n        paginationInfo={{\r\n          ...pagination,\r\n          onPageChange: handlePageChange,\r\n          onPageSizeChange: handlePageSizeChange,\r\n        }}\r\n      />\r\n    </PageWrapper>\r\n  );\r\n};\r\n\r\nexport default Managers;\r\n"],"names":["StyledTableHeadCell","styled","TableCell","_ref","theme","tableCellClasses","head","backgroundColor","palette","primary","main","color","common","white","fontWeight","body","fontSize","_ref2","rows","paginationInfo","React","className","Typography","variant","style","marginBottom","TableContainer","component","Paper","Table","TableHead","TableRow","align","TableBody","map","row","key","id","hover","scope","name","Pagination","Managers","setRows","useState","pagination","setPagination","pageNumber","pageSize","totalCount","fetch","async","page","size","data","meta","CallabtAPI","orderField","orderDirection","offsetPagination","error","_error$errorCodes","_error$errorCodes2","errorCodes","includes","INVALID_QUERY_ORDER_FIELD","alert","INVALID_QUERY_ORDER_DIRECTION","useEffect","PageWrapper","ManagersPage","onPageChange","newPage","onPageSizeChange","newPageSize"],"sourceRoot":""}